@import '~themes/vars.less';

.container {
  height: 100vh;
  background: white;
  margin-left: 220px;
  padding: 20px;
}
.markdownArticlePanel {
  margin: -20px;
}
.panel {
  color: black;
  display: flex;

  &.vertical {
    flex-direction: column;
  }
}

.articlePanel {
  border: 1px solid #ccc;
}

.toolPanel {
  border: 0 solid #ccc;
  border-width: 1px 0 1px 0;
}

.codePanel {
  .panel;
  height: 800px;
}

:global {
  .CodeMirror {
    height: 100%;
    font-size: 16px;
  }

  .ReactCodeMirror {
    flex: 1 1 50%;
    border: 1px solid #ccc;
  }
}

.markdownContainer {
  flex: 1 1 50%;
  padding: 4px 8px;
  background: #f4f4f4;
  overflow: auto;

  font-size: 16px;
}

.upload {
  width: fit-content;
}

.title {
  width: ~"calc(100% - 16px)";
  height: 1.7em;
  margin: 0;
  border: none;
  font-size: 1.5em;
  line-height: 1.7em;
  &:focus {
    border: none;
    box-shadow: none;
  }
}

.abstraction {
  .title();
  height: 4.5em;
  font-size: 1em;
  line-height: 1.5em;
}

button {
  position: relative;
  display: inline-block;
  padding: 4px 8px;
  width: 120px;
  height: @button-height-base;
  font-size: 12px;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none;
  border: @border-width-base @border-style-base @input-border-color;
  border-radius: 6px;
  transition: all .3s;

  &:hover {
    .hover();
  }

  &:focus {
    .active();
  }
}

// input status
// == when focus or actived
.active(@color: @outline-color) {
  border-color: ~`colorPalette("@{color}", 5)`;
  outline: 0;
  box-shadow: 0 0 @outline-blur-size @outline-width fade(@color, 20%);
}

// == when hoverd
.hover(@color: @input-hover-border-color) {
  border-color: ~`colorPalette("@{color}", 5)`;
}